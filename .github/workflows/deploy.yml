name: Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: registry.lux.network
  IMAGE_NAME: lxdex

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
      - name: Build and push UI
        uses: docker/build-push-action@v5
        with:
          context: ./ui
          file: ./docker/ui/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-ui
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.lux.network
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/staging/
          kubectl set image deployment/lxdex lxdex=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }} -n lxdex-staging
          kubectl rollout status deployment/lxdex -n lxdex-staging --timeout=600s
          
      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=lxdex -n lxdex-staging --timeout=300s
          SERVICE_IP=$(kubectl get svc lxdex -n lxdex-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f http://${SERVICE_IP}/health || exit 1
          
      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Staging deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment*\nStatus: ${{ job.status }}\nVersion: ${{ needs.build-and-push.outputs.version }}\nCommit: ${{ github.sha }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://api.lux.network
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          
      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add nats https://nats-io.github.io/k8s/helm/charts/
          helm repo update
          
      - name: Deploy using Helm
        run: |
          helm upgrade --install lxdex-production ./helm/lxdex \
            --namespace lxdex-production \
            --create-namespace \
            --values helm/lxdex/values.yaml \
            --values helm/lxdex/values.production.yaml \
            --set image.tag=${{ needs.build-and-push.outputs.version }} \
            --wait \
            --timeout 15m
            
      - name: Verify deployment
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=lxdex -n lxdex-production --timeout=600s
          kubectl get pods -n lxdex-production
          
      - name: Run integration tests
        run: |
          go test -tags integration ./test/integration/... -v
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            bin/*
            
      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Production deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment*\nStatus: ${{ job.status }}\nVersion: ${{ needs.build-and-push.outputs.version }}\nTag: ${{ github.ref }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment:
      name: production-rollback
    steps:
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          
      - name: Rollback deployment
        run: |
          kubectl rollout undo statefulset/lxdex-node -n lxdex-production
          kubectl rollout status statefulset/lxdex-node -n lxdex-production --timeout=600s
          
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "ðŸš¨ Production rollback initiated",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Rollback*\nRolling back due to deployment failure\nPrevious version restored"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}