name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        cd backend
        go mod download
        go mod verify
    
    - name: Run tests
      run: |
        cd backend
        go test -v ./pkg/...
    
    - name: Run tests with race detector
      run: |
        cd backend
        go test -race -short ./pkg/...
    
    - name: Generate coverage
      run: |
        cd backend
        go test -coverprofile=coverage.out ./pkg/...
        go tool cover -html=coverage.out -o coverage.html

  benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Run Go benchmark
      run: |
        cd backend
        go test -bench=. -benchtime=10s ./pkg/... | tee bench_results.txt
    
    - name: Build C++ library
      run: |
        cd backend
        make cpp-build || echo "C++ build skipped"
    
    - name: Run Go vs C++ comparison
      run: |
        cd backend
        make bench-compare || echo "Comparison skipped"

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Build binaries
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        cd backend
        CGO_ENABLED=0 go build -o ../bin/server-${{ matrix.os }}-${{ matrix.arch }} ./cmd/dex-server
        CGO_ENABLED=0 go build -o ../bin/trader-${{ matrix.os }}-${{ matrix.arch }} ./cmd/dex-trader
        CGO_ENABLED=0 go build -o ../bin/bench-${{ matrix.os }}-${{ matrix.arch }} ./cmd/bench
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.arch }}
        path: bin/*

  integration:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Install NATS
      run: |
        wget https://github.com/nats-io/nats-server/releases/download/v2.10.7/nats-server-v2.10.7-linux-amd64.tar.gz
        tar -xzf nats-server-v2.10.7-linux-amd64.tar.gz
        sudo mv nats-server-v2.10.7-linux-amd64/nats-server /usr/local/bin/
    
    - name: Start NATS server
      run: |
        nats-server -js &
        sleep 2
    
    - name: Run end-to-end test
      run: |
        cd backend
        
        # Start server in background
        go run ./cmd/dex-server &
        SERVER_PID=$!
        sleep 3
        
        # Run normal trader test
        timeout 10s go run ./cmd/dex-trader -traders 5 -duration 5s || true
        
        # Run auto-scaling trader test
        timeout 15s go run ./cmd/dex-trader -auto || true
        
        # Kill server
        kill $SERVER_PID || true
        
        echo "âœ… End-to-end tests passed"

  openapi:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Install ogen
      run: go install github.com/ogen-go/ogen/cmd/ogen@latest
    
    - name: Generate OpenAPI server
      run: |
        cd backend
        ogen --target api/generated --package generated api/openapi.yaml
    
    - name: Install OpenAPI Generator
      run: |
        npm install -g @openapitools/openapi-generator-cli
    
    - name: Generate clients
      run: |
        cd backend
        
        # Generate TypeScript client
        openapi-generator-cli generate \
          -i api/openapi.yaml \
          -g typescript-axios \
          -o api/clients/typescript
        
        # Generate Python client
        openapi-generator-cli generate \
          -i api/openapi.yaml \
          -g python \
          -o api/clients/python
        
        # Generate Java client
        openapi-generator-cli generate \
          -i api/openapi.yaml \
          -g java \
          -o api/clients/java
    
    - name: Upload client artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openapi-clients
        path: backend/api/clients/

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: backend
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'