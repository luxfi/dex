name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libzmq3-dev
        cd backend && go mod download
    
    - name: Run tests
      run: |
        cd backend
        go test -v -race -coverprofile=coverage.txt ./...
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.txt

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build all engines
      run: |
        make build
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: backend/bin/

  benchmark:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download binaries
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: backend/bin/
    
    - name: Make binaries executable
      run: chmod +x backend/bin/*
    
    - name: Run benchmarks
      run: |
        make bench-quick
    
    - name: Save benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'customBiggerIsBetter'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  generate-sdks:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install OpenAPI Generator
      run: |
        npm install -g @openapitools/openapi-generator-cli
    
    - name: Generate SDKs
      run: |
        openapi-generator-cli generate -i api/openapi.yaml -g typescript-axios -o sdk/typescript
        openapi-generator-cli generate -i api/openapi.yaml -g python -o sdk/python
        openapi-generator-cli generate -i api/openapi.yaml -g go -o sdk/go-generated
        openapi-generator-cli generate -i api/openapi.yaml -g rust -o sdk/rust
    
    - name: Commit SDKs
      run: |
        git config --local user.email "ci@luxfi.com"
        git config --local user.name "CI Bot"
        git add sdk/
        git diff --staged --quiet || git commit -m "Auto-generate SDKs"

  release:
    runs-on: ubuntu-latest
    needs: [test, build, benchmark]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download binaries
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: backend/bin/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: backend/bin/*
        tag_name: v${{ github.run_number }}
        name: Release ${{ github.run_number }}
        body: |
          Automated release from CI
          
          Performance:
          - Pure C++: 1.3M+ orders/sec
          - Hybrid Go/C++: 180K orders/sec
          - Pure Go: 163K orders/sec
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: luxfi/dex:latest,luxfi/dex:${{ github.sha }}