syntax = "proto3";

package lx.engine.v1;

option go_package = "github.com/luxexchange/engine/backend/pkg/proto/engine";

// Universal LX Engine Service - implemented by all engine variants
service EngineService {
  // Order management
  rpc SubmitOrder(SubmitOrderRequest) returns (SubmitOrderResponse);
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);
  
  // Market data
  rpc GetOrderBook(GetOrderBookRequest) returns (GetOrderBookResponse);
  rpc StreamOrderBook(StreamOrderBookRequest) returns (stream OrderBookUpdate);
}

// Order types
enum OrderSide {
  ORDER_SIDE_UNSPECIFIED = 0;
  ORDER_SIDE_BUY = 1;
  ORDER_SIDE_SELL = 2;
}

enum OrderType {
  ORDER_TYPE_UNSPECIFIED = 0;
  ORDER_TYPE_MARKET = 1;
  ORDER_TYPE_LIMIT = 2;
  ORDER_TYPE_STOP = 3;
  ORDER_TYPE_STOP_LIMIT = 4;
}

enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;
  ORDER_STATUS_NEW = 1;
  ORDER_STATUS_PARTIALLY_FILLED = 2;
  ORDER_STATUS_FILLED = 3;
  ORDER_STATUS_CANCELED = 4;
  ORDER_STATUS_REJECTED = 5;
}

// Submit order
message SubmitOrderRequest {
  string symbol = 1;
  OrderSide side = 2;
  OrderType type = 3;
  double quantity = 4;
  double price = 5;
  string client_order_id = 6;
}

message SubmitOrderResponse {
  string order_id = 1;
  OrderStatus status = 2;
  string message = 3;
}

// Cancel order
message CancelOrderRequest {
  string order_id = 1;
}

message CancelOrderResponse {
  bool success = 1;
  string message = 2;
}

// Order book
message GetOrderBookRequest {
  string symbol = 1;
  int32 depth = 2;
}

message PriceLevel {
  double price = 1;
  double quantity = 2;
  int32 order_count = 3;
}

message GetOrderBookResponse {
  string symbol = 1;
  repeated PriceLevel bids = 2;
  repeated PriceLevel asks = 3;
  int64 timestamp = 4;
}

// Streaming
message StreamOrderBookRequest {
  string symbol = 1;
  int32 depth = 2;
}

message OrderBookUpdate {
  string symbol = 1;
  repeated PriceLevel bid_updates = 2;
  repeated PriceLevel ask_updates = 3;
  int64 timestamp = 4;
  bool is_snapshot = 5;
}