version: '3.8'

services:
  # Pure Go Engine
  go-engine:
    build:
      context: .
      dockerfile: Dockerfile.go
    environment:
      - CGO_ENABLED=0
      - ENGINE_PORT=50051
      - LOG_LEVEL=info
    ports:
      - "50051:50051"
    volumes:
      - ./data:/data
      - ./configs:/configs
    networks:
      - lx-network
    healthcheck:
      test: ["CMD", "grpcurl", "-plaintext", "localhost:50051", "list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hybrid Go/C++ Engine (with CGO)
  hybrid-engine:
    build:
      context: .
      dockerfile: Dockerfile.hybrid
      args:
        - CGO_ENABLED=1
    environment:
      - CGO_ENABLED=1
      - ENGINE_PORT=50052
      - LOG_LEVEL=info
    ports:
      - "50052:50052"
    volumes:
      - ./data:/data
      - ./configs:/configs
    networks:
      - lx-network
    healthcheck:
      test: ["CMD", "grpcurl", "-plaintext", "localhost:50052", "list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pure C++ Engine
  cpp-engine:
    build:
      context: .
      dockerfile: Dockerfile.cpp
    environment:
      - ENGINE_PORT=50053
      - LOG_LEVEL=info
    ports:
      - "50053:50053"
    volumes:
      - ./data:/data
      - ./configs:/configs
    networks:
      - lx-network
    healthcheck:
      test: ["CMD", "grpcurl", "-plaintext", "localhost:50053", "list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rust Engine
  rust-engine:
    build:
      context: ./rust-engine
      dockerfile: Dockerfile
    environment:
      - RUST_LOG=info
      - ENGINE_PORT=50054
    ports:
      - "50054:50054"
    volumes:
      - ./data:/data
      - ./configs:/configs
    networks:
      - lx-network
    healthcheck:
      test: ["CMD", "grpcurl", "-plaintext", "localhost:50054", "list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TypeScript Engine
  ts-engine:
    build:
      context: ./ts-engine
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - ENGINE_PORT=50055
      - LOG_LEVEL=info
    ports:
      - "50055:50055"
    volumes:
      - ./data:/data
      - ./configs:/configs
    networks:
      - lx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:50055/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FIX Gateway
  fix-gateway:
    build:
      context: .
      dockerfile: Dockerfile.fix
    environment:
      - FIX_PORT=9878
      - ENGINE_ENDPOINT=hybrid-engine:50052
      - LOG_LEVEL=info
    ports:
      - "9878:9878"
    depends_on:
      - hybrid-engine
    volumes:
      - ./data:/data
      - ./configs:/configs
    networks:
      - lx-network

  # Load Balancer / Router
  engine-router:
    build:
      context: .
      dockerfile: Dockerfile.router
    environment:
      - ROUTER_PORT=50050
      - GO_ENGINE=go-engine:50051
      - HYBRID_ENGINE=hybrid-engine:50052
      - CPP_ENGINE=cpp-engine:50053
      - RUST_ENGINE=rust-engine:50054
      - TS_ENGINE=ts-engine:50055
      - DEFAULT_ENGINE=hybrid-engine:50052
    ports:
      - "50050:50050"
    depends_on:
      - go-engine
      - hybrid-engine
      - cpp-engine
      - rust-engine
      - ts-engine
    networks:
      - lx-network
    healthcheck:
      test: ["CMD", "grpcurl", "-plaintext", "localhost:50050", "list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Benchmark Tool
  benchmark:
    build:
      context: .
      dockerfile: Dockerfile.benchmark
    environment:
      - BENCHMARK_MODE=comparison
      - ENGINES=go-engine:50051,hybrid-engine:50052,cpp-engine:50053,rust-engine:50054,ts-engine:50055
    volumes:
      - ./data:/data
      - ./benchmark-results:/results
    networks:
      - lx-network
    profiles:
      - benchmark
    depends_on:
      - go-engine
      - hybrid-engine
      - cpp-engine
      - rust-engine
      - ts-engine

  # FIX Data Replay Service
  fix-replay:
    build:
      context: .
      dockerfile: Dockerfile.replay
    environment:
      - REPLAY_MODE=realtime
      - TARGET_ENGINE=engine-router:50050
      - DATA_DIR=/data/fix
    volumes:
      - ./data:/data
    networks:
      - lx-network
    profiles:
      - replay
    depends_on:
      - engine-router

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - lx-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    networks:
      - lx-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

networks:
  lx-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data: