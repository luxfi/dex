openapi: 3.0.3
info:
  title: LX DEX Trading API
  description: High-performance decentralized exchange API
  version: 1.0.0
  contact:
    name: LX Team
    url: https://luxfi.com
servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.lx.com
    description: Production server
paths:
  /health:
    get:
      summary: Health check
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  
  /orders:
    post:
      summary: Submit a new order
      operationId: submitOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: List orders
      operationId: listOrders
      parameters:
        - name: symbol
          in: query
          description: Filter by symbol
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of orders to return
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  
  /orders/{orderId}:
    get:
      summary: Get order by ID
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    
    delete:
      summary: Cancel order
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order cancelled
        '404':
          description: Order not found
  
  /orderbook/{symbol}:
    get:
      summary: Get orderbook for symbol
      operationId: getOrderbook
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: Number of price levels
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Orderbook snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orderbook'
  
  /trades:
    get:
      summary: Get recent trades
      operationId: getTrades
      parameters:
        - name: symbol
          in: query
          description: Filter by symbol
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of trades
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: List of trades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'
  
  /ws:
    get:
      summary: WebSocket connection for real-time data
      operationId: websocket
      responses:
        '101':
          description: Switching to WebSocket protocol

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        uptime:
          type: integer
          description: Uptime in seconds
    
    Order:
      type: object
      required:
        - symbol
        - side
        - type
        - quantity
      properties:
        id:
          type: string
          format: uuid
        symbol:
          type: string
          example: BTC/USD
        side:
          type: string
          enum: [buy, sell]
        type:
          type: string
          enum: [market, limit, stop]
        price:
          type: number
          format: double
          description: Required for limit orders
        quantity:
          type: number
          format: double
        status:
          type: string
          enum: [pending, open, filled, partially_filled, cancelled, rejected]
        filledQuantity:
          type: number
          format: double
        remainingQuantity:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
    
    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        status:
          type: string
        message:
          type: string
    
    Trade:
      type: object
      properties:
        id:
          type: string
          format: uuid
        symbol:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: number
          format: double
        buyOrderId:
          type: string
          format: uuid
        sellOrderId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
    
    Orderbook:
      type: object
      properties:
        symbol:
          type: string
        bids:
          type: array
          items:
            $ref: '#/components/schemas/PriceLevel'
        asks:
          type: array
          items:
            $ref: '#/components/schemas/PriceLevel'
        timestamp:
          type: string
          format: date-time
    
    PriceLevel:
      type: object
      properties:
        price:
          type: number
          format: double
        quantity:
          type: number
          format: double
        orderCount:
          type: integer
    
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object